openapi: 3.0.1
info:
  title: APIHUB BE API contract
  description: 'The API contract for APIHUB UI and APIDOC UI. You can find more information about the project at [BASS page](https://bass.netcracker.com/display/APIM/API+HUB).'
  contact:
    email: damir.yusipov@netcracker.com
    name: Damir Yusipov
  version: 0.5.0
  x-nc-api-type: internal
externalDocs:
  description: Find out more about project
  url: 'https://bass.netcracker.com/display/APIM/API+HUB'
servers:
  - url: 'https://apihub.netcracker.com/api/v1'
    description: Direct API call host
  - url: 'http://localhost:3000'
    description: Local server
tags:
  - name: Auth
    description: APIs for auth integrations
  - name: Groups
    description: APIs for the group management
  - name: Projects
    description: APIs for the project management
  - name: Branches
    description: APIs for the project branches
  - name: Users
    description: APIs for the user operaions
  - name: Contents
    description: 'The API content management (folders, specification files, publication process)'
  - name: Doc
    description: API HUB documentation portal APIs
  - name: Editor
    description: API HUB editor APIs
  - name: Search
    description: Search API
  - name: Versions
    description: Published project versions API
  - name: Compare
    description: Published project comparison API
  - name: System
    description: System info
  - name: Integrations
    description: APIs for git integrations
  - name: Custom
    description: APIs for custom integrations
paths:
  /auth/token:
    post:
      tags:
        - Auth
      summary: Basic auth
      description: Basic authentication
      operationId: postAuthToken
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /integrations/gitlab/apikey:
    get:
      tags:
        - Integrations
      summary: Get Gitlab-apikey integration status
      description: Get integration status
      operationId: getIntegrationGitlabApiKey
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitlabApiKeyIntegrationStatus'
    put:
      tags:
        - Integrations
      summary: Update Gitlab-apikey integration
      description: Update integration data
      operationId: putIntegrationGitlabApikey
      requestBody:
        description: User ApiKey
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitlabApiKeyIntegrationData'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitlabApiKeyIntegrationStatus'
  '/integrations/{integrationType}/repositories':
    get:
      tags:
        - Integrations
      summary: Get list of the GIT repositories
      description: Get list of the GIT repositories
      operationId: getRepositories
      parameters:
        - name: filter
          schema:
            type: string
          description: Filter string or GIT clone URL
          in: query
          required: false
        - name: integrationType
          schema:
            type: string
          description: Integration type
          in: path
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                description: Repositories list (max 15 items)
                type: object
                properties:
                  repositories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Repository'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
  '/integrations/{integrationType}/repositories/{repositoryId}/branches':
    get:
      tags:
        - Integrations
      summary: Get list of branches
      description: 'Get list of branches (same logic as GET ''/projects/{projectId}/branches'')'
      operationId: getRepositoryIdBranches
      parameters:
        - name: repositoryId
          schema:
            type: string
          description: Repository Id
          in: path
          required: true
        - name: integrationType
          schema:
            type: string
          description: Integration type
          in: path
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                description: Branche list (all)
                type: object
                properties:
                  repositories:
                    type: array
                    items:
                      $ref: '#/components/schemas/GitBranch'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
  /groups:
    post:
      tags:
        - Groups
      summary: Create a new group
      description: Create a new project group
      operationId: postGroups
      requestBody:
        description: Group for creation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreate'
        required: true
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
    get:
      tags:
        - Groups
      summary: Get groups list
      description: Retrieve the group list
      operationId: getGroups
      parameters:
        - name: groupId
          description: Result root Group Id
          schema:
            type: string
          in: query
          allowEmptyValue: true
        - name: depth
          schema:
            type: number
            default: 1
          in: query
          description: Depth of subgroups. Full depth if 0.
          allowEmptyValue: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                description: Groups list
                type: object
                properties:
                  groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
  '/groups/{groupId}':
    parameters:
      - name: groupId
        in: path
        description: Group unique identifier
        required: true
        schema:
          type: string
          format: uuid
          example: 957c5116-aeaa-400b-962e-37a7616c3099
    put:
      tags:
        - Groups
      summary: Update group
      description: Change the group's parameters
      operationId: putGroupsId
      requestBody:
        description: Group update parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreate'
      responses:
        '200':
          description: Successfully changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
    delete:
      tags:
        - Groups
      summary: Delete group
      description: Delete the group and all nested groups and projects. The GIT objects are not deleted
      operationId: deleteGroupsId
      responses:
        '204':
          description: Successfully deleted
          content: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
    get:
      tags:
        - Groups
      summary: Get group info
      operationId: getGroupsId
      description: Get group info
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfo'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
  '/groups/{groupId}/publish':
    parameters:
      - name: groupId
        in: path
        description: Group unique identifier
        required: true
        schema:
          type: string
          format: uuid
          example: 957c5116-aeaa-400b-962e-37a7616c3099
    post:
      tags:
        - Groups
      summary: Publush group version
      description: Publush group version
      operationId: postGroupsIdPublish
      requestBody:
        description: Publish params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupPublishParams'
        required: true
      responses:
        '200':
          description: Successful execution
          content: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
                BranchNotFound:
                  $ref: '#/components/examples/BranchNotFound'
  /projects:
    post:
      tags:
        - Projects
      summary: Create a new project
      description: Create a new project in the API HUB
      operationId: postProjects
      requestBody:
        description: Project for creation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
            examples:
              ProjectCreateInfo:
                $ref: '#/components/examples/ProjectCreate'
        required: true
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
              examples:
                ProjectBaseInfo:
                  $ref: '#/components/examples/Project'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                IncorrectInputParams:
                  $ref: '#/components/examples/IncorrectInputParams'
    get:
      tags:
        - Projects
        - Doc
      summary: Get projects list
      description: Retreive the projects list
      operationId: getProjects
      parameters:
        - name: groupId
          in: query
          description: filter by Group id.
          schema:
            type: string
            format: uuid
        - name: alias
          in: query
          description: find project by full alias.
          schema:
            type: string
        - name: filter
          in: query
          description: filter by name/alias.
          schema:
            type: string
        - name: onlyFavorite
          in: query
          description: filter only favorite projects
          schema:
            type: boolean
            default: false
        - name: onlyPublished
          in: query
          description: Filter only projects with published versions
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                description: Projects list with paging information
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
  '/projects/{projectId}':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
    get:
      tags:
        - Projects
      summary: Get project by Id
      description: Detail information about the project and references with the GIT repository
      operationId: getProjectsId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectInfo'
              examples:
                ProjectInfo:
                  $ref: '#/components/examples/ProjectInfo'
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
    put:
      tags:
        - Projects
      summary: Update project
      description: Change the project's parameters
      operationId: putProjectsId
      requestBody:
        description: Project update parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Successfully changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
              examples:
                ProjectBaseInfo:
                  $ref: '#/components/examples/Project'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
    delete:
      tags:
        - Projects
      summary: Delete project
      description: Delete the project and all links to the GIT. The GIT objects are not deleted
      operationId: deleteProjectsId
      responses:
        '204':
          description: Successfully deleted
          content: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/branches':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
    get:
      tags:
        - Projects
        - Branches
      summary: Get project branches list
      description: Retreive the project branches list (20 items best match filter)
      operationId: getProjectsIdBranches
      parameters:
        - name: filter
          in: query
          description: Branch filter
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                description: Branches list
                type: object
                properties:
                  branches:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectBranch'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/branches/{branch}/upload':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: branch
        in: path
        description: Git branch name (URL encoded)
        required: true
        schema:
          type: string
          format: URLencoded
    post:
      tags:
        - Projects
        - Branches
        - Contents
      summary: Upload files to project branch
      description: Upload files to project branch
      operationId: postProjectsIdBrancheContents
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponce'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
                BranchNotFound:
                  $ref: '#/components/examples/BranchNotFound'
  '/projects/{projectId}/branches/{branch}':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: branch
        in: path
        description: Git branch name (URL encoded)
        required: true
        schema:
          type: string
          format: URLencoded
    get:
      tags:
        - Projects
        - Branches
      summary: Get project branch config file
      description: Get the project branch details by ID
      operationId: getProjectsIdBranche
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectContent'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
                BranchNotFound:
                  $ref: '#/components/examples/BranchNotFound'
    put:
      tags:
        - Projects
        - Branches
      summary: Update project branch config file
      description: Change the project branch parameters
      operationId: putProjectsIdBranche
      requestBody:
        description: Project update parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectBranchConfigParams'
      responses:
        '200':
          description: Successfully changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectContent'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
                BranchNotFound:
                  $ref: '#/components/examples/BranchNotFound'
    delete:
      summary: Delete draft changes
      tags:
        - Projects
        - Branches
      operationId: deleteProjectsIdBranch
      description: Delete draft changes and get config file from GIT
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectContent'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
                BranchNotFound:
                  $ref: '#/components/examples/BranchNotFound'
  '/projects/{projectId}/branches/{branch}/history':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: branch
        in: path
        description: Git branch name (URL encoded)
        required: true
        schema:
          type: string
          format: URLencoded
    get:
      tags:
        - Projects
        - Branches
      summary: Get project branche commit history
      description: Retreive the project branche commit history
      operationId: getProjectsIdBranchHistory
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                description: History items list
                type: object
                properties:
                  changes:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChangeHistory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/branches/{branch}/publish':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: branch
        in: path
        description: Git branch name (URL encoded)
        required: true
        schema:
          type: string
          format: URLencoded
    post:
      tags:
        - Projects
        - Branches
      summary: Publush project branch
      description: Project branch publishing
      operationId: postProjectsIdBranchePublish
      requestBody:
        description: Publish params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectPublishParams'
        required: true
      responses:
        '200':
          description: Successful execution
          content: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
                BranchNotFound:
                  $ref: '#/components/examples/BranchNotFound'
  '/projects/{projectId}/branches/{branch}/save':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: branch
        in: path
        description: Git branch name (URL encoded)
        required: true
        schema:
          type: string
          format: URLencoded
    post:
      tags:
        - Projects
        - Branches
      summary: Save project branch (commit)
      description: Commit project branch to Git
      operationId: postProjectsIdBrancheSave
      requestBody:
        description: Publish params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectSaveParams'
        required: true
      responses:
        '200':
          description: Successful execution
          content: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
                BranchNotFound:
                  $ref: '#/components/examples/BranchNotFound'
  '/projects/{projectId}/branches/{branch}/zip':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: branch
        in: path
        description: Git branch name (URL encoded)
        required: true
        schema:
          type: string
          format: URLencoded
    get:
      tags:
        - Projects
        - Branches
      summary: Download project branch (zip)
      description: Get the whole project branch as a zip file
      operationId: getProjectsIdBrancheFile
      responses:
        '200':
          description: Successful execution
          content:
            application/zip:
              schema:
                type: string
                format: binary
                description: file to download
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
                BranchNotFound:
                  $ref: '#/components/examples/BranchNotFound'
  '/projects/{projectId}/branches/{branch}/files':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: branch
        in: path
        description: Git branch name (URL encoded)
        required: true
        schema:
          type: string
          format: URLencoded
    get:
      tags:
        - Contents
      summary: Get GIT branch files/folders list
      description: Retreive the GIT branch files/folders list
      operationId: getProjectsIdBrancheFiles
      parameters:
        - name: path
          in: query
          description: Git path
          schema:
            type: string
        - name: itemsPerPage
          in: query
          description: items per pages
          schema:
            type: number
            default: 100
        - name: page
          in: query
          description: pagination nage
          schema:
            type: number
            default: 0
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                description: List of content files
                type: object
                properties:
                  files:
                    type: array
                    items:
                      $ref: '#/components/schemas/GitBranchFile'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/favorite':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
    post:
      tags:
        - Projects
        - Users
      summary: Favorite project for user
      description: Add project to favorite list for the user. The user is taken from the token info
      operationId: postProjectsIdFavorite
      responses:
        '200':
          description: Successful operation
          content: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/unfavorite':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
    post:
      tags:
        - Projects
        - Users
      summary: Unfavorite project for user
      description: Remove project from favorite list for the user. The user is taken from the token info
      operationId: postProjectsIdUnfavorite
      responses:
        '200':
          description: Successful operation
          content: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/branches/{branch}/contents/{contentId}':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: branch
        in: path
        description: Git branch name (URL encoded)
        required: true
        schema:
          type: string
          format: URLencoded
      - name: contentId
        in: path
        description: Content object unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: 18ddf4b4-edae-4d34-abd8-a704497a7c8e
    get:
      tags:
        - Contents
      summary: Get file content
      description: Get the file content by ID
      operationId: getProjectsIdBrancheContentsId
      responses:
        '200':
          description: Successful operation
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
            application/json:
              schema:
                type: object
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
    delete:
      tags:
        - Contents
      summary: Delete draft content/changes
      description: Delete draft content and get content from GIT
      operationId: deleteProjectsIdBrancheContentsId
      responses:
        '200':
          description: Successful operation
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
    put:
      tags:
        - Contents
      summary: Update file content
      description: Update file content
      operationId: putProjectsIdBrancheContentsId
      requestBody:
        description: Project file update
        content:
          text/plain; charset=utf-8:
            schema:
              type: string
      responses:
        '200':
          description: Successful operation
          content: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/branches/{branch}/contents/{contentId}/file':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: branch
        in: path
        description: Git branch name (URL encoded)
        required: true
        schema:
          type: string
          format: URLencoded
      - name: contentId
        in: path
        description: Content object unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: 18ddf4b4-edae-4d34-abd8-a704497a7c8e
    get:
      tags:
        - Contents
      summary: Download project file
      description: Get the content object as a file
      operationId: getProjectsIdBrancheContentsIdFile
      responses:
        '200':
          description: Successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: file to download
          headers:
            Content-Disposition:
              schema:
                type: string
                example: attachment; filename="name.md"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/branches/{branch}/contents/{contentId}/messages':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: branch
        in: path
        description: Git branch name (URL encoded)
        required: true
        schema:
          type: string
          format: URLencoded
      - name: contentId
        in: path
        description: Content object unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: 18ddf4b4-edae-4d34-abd8-a704497a7c8e
    get:
      tags:
        - Contents
      summary: Get file validation messages
      description: Retreive the content object validation messages list
      operationId: getProjectsIdBrancheContentsIdMessages
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                description: Message list
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/branches/{branch}/contents/{contentId}/history':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: branch
        in: path
        description: Git branch name (URL encoded)
        required: true
        schema:
          type: string
          format: URLencoded
      - name: contentId
        in: path
        description: Content object unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: 18ddf4b4-edae-4d34-abd8-a704497a7c8e
    get:
      tags:
        - Contents
      summary: Get file changes history
      description: Show the content object changes history
      operationId: getProjectsIdBrancheContentsIdHistory
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                description: History items list
                type: object
                properties:
                  changes:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChangeHistory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/versions':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
    get:
      tags:
        - Doc
        - Versions
      summary: Get published project's versions list
      description: Get the published project's versions list
      operationId: getDocsProjectsIdVersions
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  versions:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectVersion'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/versions/{version}':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: version
        in: path
        description: Project version number
        required: true
        schema:
          type: string
          example: v1-2
    get:
      tags:
        - Doc
        - Versions
      summary: Get the published project's version content
      description: Get the published project's version content. Returns all content objects and folders.
      operationId: getDocsProjectsIdVersion
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectVersionContent'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
    put:
      tags:
        - Versions
      summary: Update project version status
      description: Update project version status
      operationId: putProjectIdVersion
      requestBody:
        description: Project version status
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/VersionStatusEnum'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectVersionContent'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
    delete:
      tags:
        - Versions
      summary: Delete project version
      description: Delete project version
      operationId: deleteProjectsIdVersion
      responses:
        '204':
          description: Deleted successfully
          content: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/versions/{version}/dependents':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: version
        in: path
        description: Project version number
        required: true
        schema:
          type: string
          example: v1-2
    get:
      tags:
        - Versions
      summary: Get the list of dependents for project version
      description: Get the list of dependents for project version
      operationId: getDocsProjectsIdVersionDependents
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/DependentProject'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/versions/{version}/contents/{contentSlug}':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: version
        in: path
        description: Project version number
        required: true
        schema:
          type: string
          example: v1-2
      - name: contentSlug
        in: path
        description: Content object unique string identifier
        required: true
        schema:
          type: string
    get:
      tags:
        - Doc
        - Versions
      summary: Get the published content object's details by ID
      description: Get the published content object's details by ID
      operationId: getDocsProjectsIdVersionContentsId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectVersionItem'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/versions/{version}/contents/{contentSlug}/file':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: version
        in: path
        description: Project version number
        required: true
        schema:
          type: string
          example: v1-2
      - name: contentSlug
        in: path
        description: Content object unique string identifier
        required: true
        schema:
          type: string
    get:
      tags:
        - Doc
        - Versions
      summary: Get the published content object as a file
      description: Get the published content object as a file
      operationId: getDocsProjectsIdVersionContentsIdFile
      responses:
        '200':
          description: Successful operation
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
                description: file to download
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/versions/{version}/contents/{contentSlug}/raw':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: version
        in: path
        description: Project version number
        required: true
        schema:
          type: string
          example: v1-2
      - name: contentSlug
        in: path
        description: Content object unique string identifier
        required: true
        schema:
          type: string
    get:
      tags:
        - Doc
        - Versions
      summary: Get the published content object in a RAW format
      description: Get the published content object in a RAW format
      operationId: getDocsProjectsIdVersionContentsIdRaw
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionsDiff'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/versions/{version}/compare/{v2Id}':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: version
        in: path
        description: Project version number
        required: true
        schema:
          type: string
          example: v1-2
      - name: v2Id
        in: path
        description: Project version number
        required: true
        schema:
          type: string
          example: v1-2
    get:
      tags:
        - Doc
        - Compare
      summary: Two published project versions comparizon
      description: Two published project versions comparizon
      operationId: postDocsProjectsIdVersionCompare
      responses:
        '200':
          description: Successful operation
          content: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  '/projects/{projectId}/versions/{version}/contents/{contentSlug}/compare/{v2Id}':
    parameters:
      - name: projectId
        in: path
        description: Project unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
      - name: version
        in: path
        description: Project version number
        required: true
        schema:
          type: string
          example: v1-2
      - name: contentSlug
        in: path
        description: Content object unique string identifier
        required: true
        schema:
          type: string
      - name: v2Id
        in: path
        description: Project version number
        required: true
        schema:
          type: string
          example: v1-1
    get:
      tags:
        - Doc
        - Compare
      summary: Two published content objects comparizon
      description: Two published content objects comparizon
      operationId: postDocsProjectsIdVersionContentsIdCompare
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionsContentDiff'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found or incorrect ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                ProjectNotFound:
                  $ref: '#/components/examples/ProjectNotFound'
  /search:
    post:
      tags:
        - Doc
        - Search
      summary: Contents search by POST method
      description: Поиск контента опубликованного проекта по параметрам (передаются в body запроса).
      operationId: postSearch
      requestBody:
        description: Filter object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterParams'
            examples:
              FilterParams:
                $ref: '#/components/examples/FilterParams'
        required: true
      responses:
        '200':
          description: Successful execution
          content: {}
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples: {}
  /info:
    get:
      tags:
        - System
      summary: Get system info
      description: Get system info.
      operationId: getSystemInfo
      parameters: []
      responses:
        '200':
          description: Successful execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
              examples:
                SystemInfo:
                  $ref: '#/components/examples/SystemInfo'
  /custom/netcracker/validate:
    post:
      tags:
        - Custom
      summary: Validate group projects version
      description: Validate group projects version.
      operationId: postIntegrationsNetcrackerValidate
      requestBody:
        description: Filter object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationParams'
        required: true
      responses:
        '200':
          description: Successful execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationReport'
  '/custom/netcracker/validate/{validationId}':
    parameters:
      - name: validationId
        in: path
        description: Validation unique string identifier
        required: true
        schema:
          type: string
          format: uuid
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
    get:
      tags:
        - Custom
      summary: Get validation report
      description: Get validation report.
      operationId: getIntegrationsNetcrackerValidationId
      parameters: []
      responses:
        '200':
          description: Successful execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationReport'
components:
  schemas:
    AuthResponse:
      description: Auth response
      type: object
      properties:
        token:
          description: Bearer token
          type: string
        user:
          $ref: '#/components/schemas/User'
      required:
        - token
    GitlabApiKeyIntegrationStatus:
      description: Gitlab ApiKey integration status
      type: object
      properties:
        status:
          description: Integration status
          type: string
      required:
        - status
    GitlabApiKeyIntegrationData:
      description: Gitlab ApiKey integration params
      type: object
      properties:
        apikey:
          description: Gitlab user apikey
          type: string
      required:
        - apikey
    GroupCreate:
      description: Project group/organization creation params
      type: object
      properties:
        shortAlias:
          description: Group short alias
          type: string
        name:
          description: Group full name
          type: string
        parentId:
          description: Parent group Id
          type: string
          format: uuid
        imageUrl:
          type: string
          format: URL
      required:
        - alias
        - name
        - shortAlias
    Group:
      description: Project group/organization
      type: object
      title: ''
      properties:
        groupId:
          description: Internal unique group ID
          type: string
          format: uuid
        alias:
          description: Group full alias
          type: string
        name:
          description: Group full name
          type: string
        parentId:
          description: Parent groupId
          type: string
          format: uuid
        imageUrl:
          type: string
          format: URL
    GroupInfo:
      description: Project group/organization info
      type: object
      title: ''
      properties:
        groups:
          description: Parent groups list
          type: array
          items:
            $ref: '#/components/schemas/Group'
        alias:
          description: Group short name - alias
          type: string
        name:
          description: Group full name
          type: string
        imageUrl:
          type: string
          format: URL
    Repository:
      description: Linked GIT repository params
      type: object
      properties:
        repositoryId:
          description: External GIT repository id
          type: string
        name:
          description: External GIT repository full name
          type: string
        defaultBranch:
          description: Name of the default branch of the linked repository
          type: string
    ProjectCreate:
      description: Parameters for the artifact creation
      required:
        - groupId
        - shortAlias
        - name
        - repositoryId
        - defaultBranch
        - defaultFolder
      type: object
      properties:
        integrationType:
          type: string
          enum:
            - gitlab
          default: gitlab
        groupId:
          description: Internal unique group ID
          type: string
          format: uuid
        name:
          description: Name of the new project
          type: string
        shortAlias:
          description: Project short alias
          type: string
        description:
          description: Common description of the project
          type: string
        repositoryId:
          description: External Git repository id
          type: string
        defaultBranch:
          description: Name of the default branch of the linked repository
          type: string
        defaultFolder:
          description: Name of the default folder of the linked branch
          type: string
    Project:
      description: 'Simple project object, without content and dependencies'
      type: object
      properties:
        projectId:
          description: Project unique string identifier
          type: string
          format: uuid
        groupId:
          description: Parent GroupId
          type: string
          format: uuid
        name:
          description: Name of the new project
          type: string
        alias:
          description: Project full alias
          type: string
        description:
          description: Common description of the project
          type: string
        defaultBranch:
          description: Name of the default branch of the linked repository
          type: string
        defaultFolder:
          description: Name of the default folder of the linked branch
          type: string
        isFavorite:
          description: Sign of the favorite project for the caller user
          type: boolean
    ProjectInfo:
      description: 'Simple project object, without content and dependencies'
      type: object
      properties:
        groupId:
          description: Parent GroupId
          type: string
          format: uuid
        projectId:
          description: Project unique string identifier
          type: string
          format: uuid
        groups:
          description: Project groups list
          type: array
          items:
            $ref: '#/components/schemas/Group'
        name:
          description: Name of the new project
          type: string
        alias:
          description: Project alias
          type: string
        description:
          description: Common description of the project
          type: string
        defaultBranch:
          description: Name of the default branch of the linked repository
          type: string
        isFavorite:
          description: Sign of the favorite project for the caller user
          type: boolean
    ProjectUpdate:
      description: 'Parameters for the project update. Not changed parameters must not be transmitted. Parameters, required in creation, must not be empty if transmitted.'
      type: object
      properties:
        groupId:
          description: Internal unique group ID
          type: string
          format: uuid
        name:
          description: Name of the new project
          type: string
        alias:
          description: Project alias
          type: string
        description:
          description: Common description of the project
          type: string
        repositoryId:
          description: External repository project ID
          type: number
          format: int32
        defaultbranch:
          description: Name of the default branch of the linked repository
          type: string
    GitBranch:
      description: External Git branch params
      type: object
      properties:
        branch:
          description: Branch Id
          type: string
        name:
          description: Branch name
          type: string
    GitBranchFile:
      description: Git branch file
      type: object
      properties:
        name:
          description: item name
          type: string
        isFolder:
          description: Is item is folder
          type: boolean
          default: false
    ProjectBranch:
      description: External Git branch params
      type: object
      properties:
        name:
          description: Branch name
          type: string
        version:
          type: string
        status:
          $ref: '#/components/schemas/VersionStatusEnum'
        publishedAt:
          type: string
          format: date-time
      required:
        - name
    ProjectContent:
      title: ProjectContent
      description: Schema for project content (config file stored in git)
      type: object
      properties:
        readonly:
          description: Is project branch readonly for user
          type: boolean
          default: false
        isDraft:
          type: boolean
          description: The flag indicates that the project is in draft and cannot be published
        isPublished:
          type: boolean
          description: The flag indicates that the project has any published version or not
        contents:
          type: array
          items:
            type: object
            properties:
              contentId:
                description: Content Id
                type: string
                format: UUID
              slug:
                description: Content slug name
                type: string
              isDraft:
                type: boolean
              index:
                description: Index for ordering (frontend)
                type: number
                format: int32
              isFolder:
                type: boolean
                default: false
                description: Is content type folder
              type:
                $ref: '#/components/schemas/ShortcutTypeEnum'
              name:
                description: Shortcut name
                type: string
              path:
                description: Virtual path to folder/shortcut
                type: string
              gitref:
                description: Git file reference url
                type: string
                format: URL
            required:
              - name
              - path
              - gitref
        refs:
          type: array
          items:
            type: object
            properties:
              projectId:
                description: project id
                type: string
                format: uuid
              name:
                description: Project name
                type: string
              version:
                description: Published version name
                type: string
              status:
                $ref: '#/components/schemas/VersionStatusEnum'
              refUrl:
                description: Published version url
                type: string
                format: URL
    ProjectBranchConfigParams:
      title: ProjectContent
      description: Schema for project branch update body (config file stored in git)
      type: object
      properties:
        contents:
          type: array
          items:
            type: object
            properties:
              name:
                description: Shortcut name
                type: string
              path:
                description: Virtual path to folder/shortcut
                type: string
              gitref:
                description: Git file reference url
                type: string
                format: URL
            required:
              - name
              - path
              - gitref
        refs:
          type: array
          items:
            type: object
            properties:
              projectAlias:
                description: project full alias
                type: string
              version:
                description: Published version name
                type: string
    ShortcutTypeEnum:
      description: Enum list of project content types
      type: string
      enum:
        - API/OPENAPI
        - API/ASYNCAPI
        - API/gRPC
        - API/GQL
        - API/AVRO
        - SECURITY_MATRIX
        - ERR_CODES
        - DEFINITIONS
        - MD
        - PICTURE
    VersionStatusEnum:
      description: Enum list of project status
      type: string
      enum:
        - draft
        - release
        - deprecated
        - archived
    UploadResponce:
      description: Upload files response
      type: object
      properties:
        files:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              path:
                type: string
              gitref:
                description: Git file reference url
                type: string
                format: URL
              type:
                $ref: '#/components/schemas/ShortcutTypeEnum'
    ProjectSaveParams:
      description: Project save params
      type: object
      properties:
        comment:
          description: Git commit comment
          type: string
    ProjectPublishParams:
      description: Project publish params
      type: object
      properties:
        version:
          description: Version name
          type: string
        status:
          $ref: '#/components/schemas/VersionStatusEnum'
    GroupPublishParams:
      description: Project publish params
      type: object
      properties:
        version:
          description: Version name
          type: string
        status:
          $ref: '#/components/schemas/VersionStatusEnum'
        refs:
          type: array
          items:
            type: string
            format: uuid
    Message:
      description: The content object validation messages list item
      type: object
      properties:
        type:
          $ref: '#/components/schemas/MessageTypeEnum'
        line:
          description: 'Number of the content object line, the message is according to'
          type: number
          format: int32
        text:
          description: Text of the message
          type: string
    MessageTypeEnum:
      description: Enum list of possible conten object validation message types
      type: string
      enum:
        - ERROR
        - WARNING
        - INFORMATION
        - RECOMMENDATION
      default: ERROR
    ChangeHistory:
      description: History item of the content changes or publications
      type: object
      properties:
        modifiedBy:
          $ref: '#/components/schemas/User'
        modifiedAt:
          description: Date of modification
          type: string
          format: date-time
        version:
          description: Project version number
          type: string
        publishedAt:
          description: Date of modification
          type: string
          format: date-time
        comment:
          description: Commit comment
          type: string
    User:
      description: User dictionary
      type: object
      properties:
        id:
          description: Login of the user
          type: string
        name:
          description: Name of the user
          type: string
        avatarUrl:
          description: Avatar of the user
          type: string
          format: URL
    ProjectVersion:
      description: Item of the project versions list
      type: object
      properties:
        version:
          description: Project version number
          type: string
        status:
          $ref: '#/components/schemas/VersionStatusEnum'
        publishDate:
          description: Date of the project version publication
          type: string
          format: date-time
    ProjectVersionContent:
      description: Published project version content
      type: object
      properties:
        version:
          description: Project version number
          type: string
        status:
          $ref: '#/components/schemas/VersionStatusEnum'
        publishDate:
          description: Date of the project version publication
          type: string
          format: date-time
        relatedProjects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectVersionRef'
        contents:
          description: List of the project content objects
          type: array
          items:
            $ref: '#/components/schemas/ProjectVersionItem'
    ProjectVersionItem:
      description: API content object parameters for the list function
      type: object
      properties:
        contentId:
          description: Content object unique string identifier
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/ShortcutTypeEnum'
        path:
          description: item folders
          type: string
        name:
          description: Name/title of the artifact
          type: string
        description:
          description: Content item description
          type: string
    ProjectVersionRef:
      description: Project version reference
      type: object
      properties:
        projectId:
          description: Project unique string identifier
          type: string
          format: uuid
        name:
          description: Name of the new project
          type: string
        alias:
          description: Project alias
          type: string
        version:
          description: Project version number
          type: string
        status:
          $ref: '#/components/schemas/VersionStatusEnum'
        refUrl:
          type: string
          format: URL
          description: Project version APIHUB documentation page url
    DependentProject:
      description: Parameters of the dependent project
      type: object
      properties:
        projectId:
          description: ID of the dependent project
          type: string
          format: uuid
        name:
          type: string
          description: Project name
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
        alias:
          description: Project alias
          type: string
        version:
          description: Version of the dependent project
          type: string
        status:
          $ref: '#/components/schemas/VersionStatusEnum'
    FilterParams:
      description: Common filter params object
      type: object
      properties:
        searchString:
          description: 'Search by common text fields (summary, description, title, etc.)'
          type: string
        organizationCode:
          description: Code of the organization from the dictionary
          type: string
        projectId:
          description: Project unique string identifier
          type: string
          format: uuid
        projectStateCode:
          description: Code of project state from the dictionary
          type: string
        projectVersion:
          description: Number of the project version. Wildcard is acceptable
          type: string
        artifactVersion:
          description: Number of the Content object version. Wildcard is acceptable
          type: string
        publicationDateStart:
          description: Publication date range start
          type: string
          format: date-time
        publicationDateEnd:
          description: Publication date range end
          type: string
          format: date-time
        openAPIParams:
          $ref: '#/components/schemas/OpenAPIParamsFilter'
    VersionsDiff:
      description: Two versions diff
      type: object
      properties: {}
    VersionsContentDiff:
      description: Two versions content diff
      type: object
      properties: {}
    OpenAPIParamsFilter:
      description: Filter object for OpenAPI object type search
      type: object
      properties:
        operationId:
          description: Search by operationId. Wildcard is acceptable
          type: string
        methods:
          description: List of available methods for search
          type: array
          items:
            type: string
        resourcePath:
          description: Part of the resource path of the API. Wildcard is acceptable
          type: string
        tags:
          description: 'List of tags, used in specification (field -Tag)'
          type: array
          items:
            type: string
        definition:
          description: Search by API definitions. Wildcard is acceptable
          type: string
        APItype:
          $ref: '#/components/schemas/ShortcutTypeEnum'
    ErrorResponse:
      description: An error description
      type: object
      properties:
        status:
          description: HTTP Status Code
          type: number
        code:
          description: Internal string error code. Mandatory in response.
          type: string
          x-nc-error-codes: {}
        message:
          description: The attribute contains an error message.
          type: string
        params:
          type: object
          description: Message parameters
          example:
            id: 12345
            type: string
        debug:
          description: The attribute contains debug details (e.g. stack-trace). Presented in the error response only on Dev/Test environments if corresponding logging level is enabled.
          type: string
      required:
        - status
        - code
        - message
    SystemInfo:
      description: Information about the API HUB product
      type: object
      properties:
        version:
          description: Current product version
          type: string
        bassPageUrl:
          description: Link to the BASS description page
          type: string
          format: URL
        apiPageUrl:
          description: Link to the API description page
          type: string
          format: URL
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
    Contact:
      description: Contact information
      type: object
      properties:
        name:
          description: Name of the employee
          type: string
        contact:
          description: Any available contact
          type: string
    ValidationParams:
      description: Netcracker product release API validation params
      properties:
        groupName:
          type: string
        version:
          type: string
          enum:
            - ok
            - error
    ValidationReport:
      description: Netcracker product release API validation report
      properties:
        validationId:
          type: string
        status:
          type: string
          enum:
            - ok
            - error
  examples:
    FilterParams:
      description: Example of the filter params
      value:
        searchString: '*any description*'
        organizationCode: Netcracker
        projectId: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
        projectStateCode: Master
        projectVersion: v1-2
        artifactVersion: v2.1
        publicationDateStart: '2021-11-21T23:59:59.000Z'
        publicationDateEnd: '2021-12-31T23:59:59.000Z'
        openAPIParams:
          operationId: '*offering*'
          methods:
            - GET
            - POST
          resourcePath: /catalogManagement/v2/productOffering
          tags:
            - ProductOffering
          definition: '*offering*'
          APItype: API/OPENAPI
    Project:
      description: Example of the project params
      value:
        groupId: 957c5116-aeaa-400b-962e-37a7616c3099
        projectId: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
        name: Test project
        alias: Test project alias
        description: Project for the test purpose
        defaultBranch: master
        isFavorite: false
    ProjectInfo:
      description: Example of the project info params
      value:
        groups:
          - groupId: 957c5116-aeaa-400b-962e-37a7616c3099
            code: Main
            name: Main group
          - groupId: 959a4582-aeaa-400b-962e-37a7616c3099
            code: NC
            name: Netcracker
        projectId: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
        name: Test project
        alias: Test project alias
        description: Project for the test purpose
        defaultBranch: master
    ProjectCreate:
      description: Example of the project creation params
      value:
        groupId: 957c5116-aeaa-400b-962e-37a7616c3099
        name: Test project
        alias: NC.BSS.PRG
        shortAlias: PRG
        description: Project for the test purpose
        repositoryId: '112233'
        defaultBranch: master
        defaultFolder: /apihub
    SystemInfo:
      description: Example of the system description
      value:
        version: 0.1.0
        BASS: 'https://bass.netcracker.com/pages/viewpage.action?pageId=1114318293'
        API: 'https://bass.netcracker.com/display/SAAS/Admin+API+List'
        contacts:
          - name: Admin
            contact: admin@netcracker.com
    BranchNotFound:
      description: Branch not found by ID. Response for the 404 error
      value:
        status: 404
        code: '0001'
        source:
          pointer: $.path.branch
          parameter: branch
        reason: Branch not found
        message: Incorrect ID or branch not found
    ProjectNotFound:
      description: Project not found by ID. Response for the 404 error
      value:
        status: 404
        code: '0005'
        source:
          pointer: $.path.projectId
          parameter: projectId
        reason: Project not found
        message: Incorrect ID or project not found
    IncorrectInputParams:
      description: Incorrect input parameters of the request. Response for the 400 error
      value:
        status: 400
        code: '0010'
        source:
          pointer: $.body.organizationCode
          parameter: organizationCode
        reason: Incorrect parameter
        message: Incorrect parameter = organizationCode
  securitySchemes:
    BearerAuth:
      type: http
      description: Common secutity scheme for API usage
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []
